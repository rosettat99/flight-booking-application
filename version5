from tkinter import *
from tkinter import messagebox
from tkcalendar import Calendar
from tkinter.ttk import Combobox  # ttk is an extension of tkinter library
from PIL import ImageTk, Image  # importing ImageTk, a specific widget used in this program so I can include photos
from datetime import datetime
import json
from docx import Document # this is so users can save their invoice as a document
from tkinter import filedialog # this lets the user choose their document file name

CHILD_DISCOUNT = 0.85
INFANT_DISCOUNT = 0.8       
tries = 0

passengers = []
root = Tk()
root.attributes('-fullscreen', True)
root.title("Flight booker")

# keep a reference to the images
image_references = {}

# creating a class for the flights
class Flights:
    def __init__(self, departure, destination, date, type, price):
        self.departure = departure
        self.destination = destination
        self.date = date
        self.type = type
        self.price = price

    # calculating the final cost of regular tickets 
    def calc_cost(self):
        return self.price

 # creating a sub class for children 
class Child(Flights):
    def __init__(self, departure, destination, date, type, price, discount=CHILD_DISCOUNT):
        super().__init__(departure, destination, date, type, price)
        self.discount = discount

    # applying the discount for child tickets
    def calc_cost(self):
        return super().calc_cost() * self.discount

 # creating a sub class for infants
class Infant(Flights):
    def __init__(self, departure, destination, date, type, price, discount=INFANT_DISCOUNT):
        super().__init__(departure, destination, date, type, price)
        self.discount = discount

    # appling the discount to infant tickets
    def calc_cost(self):
        return super().calc_cost() * self.discount

# creating the start screen
def welcome_screen():
    open("flight_log.txt", 'w').close() # clearing the txt file, so it does not show any other users information
    global welcome_frame, bg
    welcome_frame = Frame(root)
    welcome_frame.pack(fill=BOTH, expand=True)

    # getting dimensions of the user's screen
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    # opening the globe image and resizing it to fit the user's screen
    image = Image.open("images/resized_background.png")
    image = image.resize((screen_width, screen_height), Image.LANCZOS)  # LANCZOS maintains the image's quality
    bg = ImageTk.PhotoImage(image)

    label1 = Label(welcome_frame, image=bg)
    label1.place(x=0, y=0)

    program_label = Label(welcome_frame, text="", font=("Bahnschrift Condensed",20), bg="white", justify="center")
    program_label.grid(row=0, column=0, padx=50, pady=120)

    program_label1 = Label(welcome_frame, text="welcome to the", font=("Bahnschrift Condensed",20), bg="white", justify=LEFT)
    program_label1.grid(row=1, column=0)

    program_label2 = Label(welcome_frame, text="FLIGHT BOOKER", font=("Bahnschrift Condensed", 55), bg="white")
    program_label2.grid(row=2, column=0, pady=(10,0), padx = 60)

    # getting the plane image
    plane_img = PhotoImage(file='images/plane.png')
    image_references['plane_img'] = plane_img  # keeping a reference to the image

    # making the button
    plane_btn = Button(welcome_frame, image=plane_img, command=start_screen)
    plane_btn.grid(pady=0)

# creating the start screen
def start_screen():
    welcome_frame.destroy()
    global frame0
    frame0 = Frame(root)
    frame0.pack(fill=BOTH, expand=True)

    label1 = Label(frame0, image=bg)
    label1.place(x=0, y=0)

    program_label = Label(frame0, text="FLIGHT BOOKER", font=("Bahnschrift Condensed", 45), bg="white", justify="center")
    program_label.grid(row=0, column=0, padx=120, pady=(160, 20))

    # creating a log in button
    log_in_button = Button(frame0, text="LOG IN", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="light green", command=log_in)
    log_in_button.grid(row=1, column=0, pady = 15)

    # creating a create account button
    create_account_button = Button(frame0, text="CREATE ACCOUNT", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="light green", command=create_account)
    create_account_button.grid(row=2, column=0, pady=15)

    # creating an exit button
    exit_button = Button(frame0, text="EXIT", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="red", justify="center", command=exit)
    exit_button.grid(row=3, column=0, pady=15)

# creating another frame for users to log into the program
def log_in():
    global log_in_frame  # making the frame global so that it can be accessed within other functions
    frame0.pack_forget()  # forgetting the previous frame and all the widgets in it

    log_in_frame = Frame(root)
    log_in_frame.pack(fill=BOTH, expand=True)

    label2 = Label(log_in_frame, image=bg)
    label2.place(x=0, y=0)

    username_title = Label(log_in_frame, text="Enter your username: ", font=("Bahnschrift Condensed", 35), bg="white")
    username_title.grid(row=1, column=0, pady=(115,30), padx=90)

    global username
    username = Entry(log_in_frame, font=("Bahnschrift Condensed", 24), bg = "light blue")
    username.grid(row=1, column=1, pady=(115,30))

    password_title = Label(log_in_frame, text="Enter your password: ", font=("Bahnschrift Condensed", 35), bg="white")
    password_title.grid(row=2, column=0, pady=20, padx=20)

    global password
    password = Entry(log_in_frame, show="*", font=("Bahnschrift Condensed", 24), bg = "light blue")  # using this show feature so users cannot see the password they enter in order to make it more secure
    password.grid(row=2, column=1, pady=10)

    submit_user_btn = Button(log_in_frame, text="SUBMIT", width = 25, font=("Bahnschrift Condensed", 25), bg="light green", command=check_account)
    submit_user_btn.grid(row=3, column=0, pady=10, padx=10)

# creating a function to open the json file
def load_user_data(log_in_info):
    with open(log_in_info, "r") as file: #opening the json file to read
            return json.load(file)
    
accounts_dict = load_user_data("log_in_info.json")

# function to check the details the user has entered
def check_account():
    global tries, get_username
    max_attempts = 3

    if tries < max_attempts:
        get_username = username.get().strip() # retrieving the user's username input
        get_password = password.get().strip() # retrieving the user's password input
        
        if get_username in accounts_dict:
            stored_password = accounts_dict[get_username]  # if the username the user entered is in the dictionary...
            
            # making sure that the password the user entered is the same as the one that is stored
            if stored_password == get_password:  
                messagebox.showinfo("Success!", "Sign-in successful. Welcome to the flight booking application!")
                log_in_frame.destroy()  # remove frame 1
                main_menu()  # go to the menu function

            else:
                messagebox.showerror("Error", "Incorrect details, please try again.")
                tries += 1
                
        else:
            # if the user entered incorrect details
            messagebox.showerror("Error", "Incorrect details, please try again.")
            tries += 1
    
    else:
        messagebox.showerror("Error!", "Too many log in attempts. Please come back next time.")
        exit()

def create_account():
    frame0.pack_forget()  # forgetting the previous frame and all the widgets in it
    global create_account_frame

    create_account_frame = Frame(root)
    create_account_frame.pack(fill=BOTH, expand=True)

    label3 = Label(create_account_frame, image=bg)
    label3.place(x=0, y=0)

    account_label = Label(create_account_frame, text="Enter your new username: ", font=("Bahnschrift Condensed", 35), bg="white")
    account_label.grid(row=0, column=0, pady=(115,30), padx=(90,0))

    account = Entry(create_account_frame, font=("Bahnschrift Condensed", 25), bg = "light blue")
    account.grid(row=0, column=1, pady=(115,30), padx=30)

    password_label = Label(create_account_frame, text="Enter your new password: ", font=("Bahnschrift Condensed", 35), bg="white")
    password_label.grid(row=1, column=0, pady=(20,30), padx=(90,0))

    password = Entry(create_account_frame, font=("Bahnschrift Condensed", 25), bg = "light blue")
    password.grid(row=1, column=1, pady=(20,30), padx=30)

    password_restrictions = Label(create_account_frame, text="Passwords must be at least 5 characters.", font=("Bahnschrift Condensed", 15))
    password_restrictions.grid(row=2, column=0, padx=90)

    # creating a button to submit the user's input
    global enter_button
    enter_button = Button(create_account_frame, text="SUBMIT", width = 25, font=("Bahnschrift Condensed", 25), bg="light green", command=lambda: add_new_account(account.get(), password.get()))
    enter_button.grid(row=3, column=0, pady=10, padx=110)

# creating a function to save the users new account to the json file
def save_user_data(log_in_info, user_data):
    with open(log_in_info, 'w') as file: #opening the file to write
        json.dump(user_data, file)

# this function adds the user's account and password to the accounts dictionary
def add_new_account(account, password):
    if len(password) < 4:
        messagebox.showerror("Error", "Password is too short! Please try again!")

    elif account in accounts_dict:
            messagebox.showerror("Error!", "This username has already been used. Please select a new one.")
  
    else:
            accounts_dict[account] = password
            save_user_data("log_in_info.json", accounts_dict)
            enter_button.destroy()
            messagebox.showinfo("Success!", "New account added.")
            create_account_frame.destroy()  
            start_screen()

# creating a frame for the booking flights menu
def main_menu():
    global menu_frame
    menu_frame = Frame(root)
    menu_frame.pack(fill=BOTH, expand=True)

    label4 = Label(menu_frame, image=bg)
    label4.place(x=0, y=0)

    menu_label = Label(menu_frame, text="MENU", font=("Bahnschrift Condensed", 40), bg="white", justify="center")
    menu_label.grid(row=0, column=0, pady=(115,30), padx=(110,0))

    # creating a book flight button
    book_button = Button(menu_frame, text="BOOK A ONE-WAY FLIGHT", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="light green", command=book_flight)
    book_button.grid(row=1, column=0, pady=5, padx=(110,0))

    # creating a book flight button to book returns
    book_button = Button(menu_frame, text="BOOK A RETURN FLIGHT", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="light green", command=book_return_flight)
    book_button.grid(row=2, column=0, pady=5, padx=(110,0))

    # creating a view flights button
    book_button = Button(menu_frame, text="VIEW FLIGHTS", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="light green", command=view_flights)
    book_button.grid(row=3, column=0, pady=5, padx=(110,0))

    # creating an exit button
    exit_button = Button(menu_frame, text="EXIT", height=2, width=25, font=("Bahnschrift Condensed", 20), bg="red", justify="center", command=exit)
    exit_button.grid(row=4, column=0, pady=5, padx=(110,0))

# creating a frame for the booking flights menu
def book_flight():
    global book_frame, departure_combo, destination_combo, type_combo, adult_spinbox, child_spinbox, infant_spinbox, cal
    menu_frame.pack_forget()

    book_frame = Frame(root)
    book_frame.pack(fill=BOTH, expand=True)

    label5 = Label(book_frame, image=bg)
    label5.place(x=0, y=0)

    departure_label = Label(book_frame, text="Enter departure location: ", font=("Bahnschrift Condensed", 20), bg="white")
    departure_label.grid(row=0, column=0, pady=30, padx=20)

     # creating a combo box for users to select their departure location
    departure_combo = Combobox(book_frame, state = "readonly", font = ("Bahnschrift Condensed", 15))
    departure_combo.grid(column = 1, row = 0)
    departure_combo["values"] = ("Auckland, New Zealand", "Wellington, New Zealand", "Hamilton, New Zealand", "Christchurch, New Zealand", "Sydney, Australia", "Melbourne, Australia", "Canberra, Australia", "Brisbane, Australia", "Adelaide, Australia", "Nadi, Fiji", "Bangkok, Thailand", "Narita, Japan", "Hiroshima, Japan") #adding combo items using tuple
    departure_combo.current(0) #setting selected item

    destination_label = Label(book_frame, text="Enter destination: ", font=("Bahnschrift Condensed", 20), bg="white")
    destination_label.grid(row=1, column=0, pady=10, padx=20)
    # creating a combo box for users to select their departure location
    destination_combo = Combobox(book_frame, state = "readonly", font = ("Bahnschrift Condensed", 15))
    destination_combo.grid(column = 1, row = 1)
    destination_combo["values"] = ("Auckland, New Zealand", "Wellington, New Zealand", "Hamilton, New Zealand", "Christchurch, New Zealand", "Sydney, Australia", "Melbourne, Australia", "Canberra, Australia", "Brisbane, Australia", "Adelaide, Australia", "Nadi, Fiji", "Bangkok, Thailand", "Narita, Japan", "Hiroshima, Japan") #adding combo items using tuple
    destination_combo.current(1) #setting selected 

    date_label = Label(book_frame, text="Choose date: ", font=("Bahnschrift Condensed", 20), bg="white")
    date_label.grid(row=2, column=0, pady=10, padx=20)

    # adding a calendar using the built-in python module
    cal = Calendar(book_frame, selectmode="day", date_pattern="dd/mm/yyyy")
    cal.grid(row=2, column=1, pady=10)

    flight_class_label = Label(book_frame, text="Choose class: ", font=("Bahnschrift Condensed", 20), bg="white")
    flight_class_label.grid(row=3, column=0, pady=10, padx=20)

    # creating a combo box for users to select their departure location
    type_combo = Combobox(book_frame, state = "readonly", font = ("Bahnschrift Condensed", 15))
    type_combo.grid(row = 3, column = 1)
    type_combo["values"] = ("First Class", "Business Class", "Economy Class") #adding combo items using tuple
    type_combo.current(0) #setting selected 

    adult_count_label = Label(book_frame, text="Number of adults: ", font=("Bahnschrift Condensed", 20), bg="white")
    adult_count_label.grid(row=4, column=0, pady=10, padx=20)
    adult_spinbox = Spinbox(book_frame, from_ = 0, to = 10, width = 5, state = "readonly", font = ("Bahnschrift Condensed", 20))
    adult_spinbox.grid(row = 4, column = 1, padx = 10)

    child_count_label = Label(book_frame, text="Number of children: ", font=("Bahnschrift Condensed", 20), bg="white")
    child_count_label.grid(row=5, column=0, pady=10, padx=20)
    child_spinbox = Spinbox(book_frame, from_ = 0, to = 10, width = 5, state = "readonly", font = ("Bahnschrift Condensed", 20))
    child_spinbox.grid(row = 5, column = 1, padx = 10)

    infant_count_label = Label(book_frame, text="Number of infants: ", font=("Bahnschrift Condensed", 20), bg="white")
    infant_count_label.grid(row=6, column=0, pady=10, padx=20)
    infant_spinbox = Spinbox(book_frame, from_ = 0, to = 10, width = 5, state = "readonly", font = ("Bahnschrift Condensed", 20))
    infant_spinbox.grid(row = 6, column = 1, padx = 10)

    submit_button = Button(book_frame, text="SUBMIT", height=2, width=20, font=("Bahnschrift Condensed", 20), bg="light green", command=process_booking)
    submit_button.grid(row=7, column=1, pady=20, padx=10)

    back_button = Button(book_frame, text="BACK", height=2, width=20, font=("Bahnschrift Condensed", 20), bg="red", command=lambda: return_to_menu(book_frame))
    back_button.grid(row=7, column=0, pady=20, padx=10)

def book_return_flight():
    book_flight()
    global return_calendar
    date_label = Label(book_frame, text="Choose departure and return date: ", font=("Bahnschrift Condensed", 20), bg="white")
    date_label.grid(row=2, column=0, pady=10, padx=20)

    # adding a calendar using the built-in python module
    return_calendar = Calendar(book_frame, selectmode="day", date_pattern="dd/mm/yyyy")
    return_calendar.grid(row=2, column=3, pady=10, padx = 100)
    
def view_flights():
    global view_flights_frame
    menu_frame.pack_forget()

    view_flights_frame = Frame(root, bg = "light blue")
    view_flights_frame.pack(fill=BOTH, expand=True)

    label6 = Label(view_flights_frame, image=bg)
    label6.place(x=0, y=0)

    back = Button(view_flights_frame, text="BACK", height=1, width=20, font=("Bahnschrift Condensed", 15), bg="red", command=lambda: return_to_menu(view_flights_frame))
    back.grid(row=0, column=0, pady=10, padx=10)

    flights_label = Label(view_flights_frame, text="VIEW BOOKED FLIGHTS: ", font=("Bahnschrift Condensed", 40), bg="white", justify=LEFT)
    flights_label.grid(row=1, column=0, pady=10, padx=(5,0))

    # creating a text box, so that i can display the flights people have booked
    flights_text = Text(view_flights_frame, font=("Bahnschrift Condensed", 15), bg="white")
    flights_text.grid(row=2, column=0, pady=10, padx=(20,0))
    
      # opening the text file
    with open("flight_log.txt", "r") as file:
        flight_logs = file.read()
        flights_text.insert(END, flight_logs)
        flights_text.config(state=DISABLED)

def process_booking():
    global invoice_details
    # retrieving all the details
    departure = departure_combo.get()
    destination = destination_combo.get()
    flight_class = type_combo.get()
    num_adults = int(adult_spinbox.get())
    num_children = int(child_spinbox.get())
    num_infants = int(infant_spinbox.get())

    # retrieving the date information from the calendars and putting them into the date object for comparison
    departure_date = datetime.strptime(cal.get_date(), "%d/%m/%Y").date() #"%d/%m/%Y" puts the date into the correct format using the datetime extension, #.date() removes the time and just keeps the date. 

    # check if there are any passengers 
    if num_adults + num_children + num_infants == 0:
        messagebox.showerror("Error!", "There must be at least one passenger (adult, child, or infant).")
        return
    
     # setting the prices of the flights
    if flight_class == "First Class":
        base_price = 5000

    elif flight_class == "Business Class":
        base_price = 4000
    
    elif flight_class == "Economy Class":
        base_price = 3000
    
    passengers = []

    # adding adult tickets to the flight class
    for _ in range(num_adults):
        passengers.append(Flights(departure, destination, departure_date, flight_class, base_price))

    # adding child tickets to the child class
    for _ in range(num_children):
        passengers.append(Child(departure, destination, departure_date, flight_class, base_price))

    # adding infant tickets to the infant class
    for _ in range(num_infants):
        passengers.append(Infant(departure, destination, departure_date, flight_class, base_price))
    
    # calculating the total cost of all passengers, including gst
    total_cost = sum([flight.calc_cost() for flight in passengers])
    gst = total_cost * 0.15
    total_cost_incl_gst = total_cost + gst

    # creating an invoice message
    invoice_details = f"----- Invoice-----\nName: {get_username}\nDeparture: {departure}\nDestination: {destination}\nDate: {departure_date}\nClass: {flight_class}\n"
    
    if 'return_calendar' in globals(): # this finds out whether the user has booked a return flight, or not by finding out whether the return calendar is a global variable
        return_date = datetime.strptime(return_calendar.get_date(), "%d/%m/%Y").date() 
        if return_date <= departure_date:
            messagebox.showerror("Error!", "Please ensure your return date is after departure date. ")
            return        
        else:
            invoice_details += f"Return date: {return_date}\n\n"
    else:
        next

    # checking the amount of passengers, and adding their information to the invoice
    if num_adults > 0:
            adult_cost = sum([flight.calc_cost() for flight in passengers if isinstance(flight, Flights) and not isinstance(flight, (Child, Infant))]) #if passengers is part of the flights class
            invoice_details += f"Adult Ticket(s): ${adult_cost:.2f} ({num_adults} @ ${base_price:.2f} each)\n"

    if num_children > 0:
        child_cost = sum([flight.calc_cost() for flight in passengers if isinstance(flight, Child)]) #if passengers is part of the child class
        invoice_details += f"Child Ticket(s): ${child_cost:.2f} ({num_children} @ ${base_price * CHILD_DISCOUNT:.2f} each)\n"

    if num_infants > 0:
        infant_cost = sum([flight.calc_cost() for flight in passengers if isinstance(flight, Infant)]) #if passenger is part of the infant class
        invoice_details += f"Infant Ticket(s): ${infant_cost:.2f} ({num_infants} @ ${base_price * INFANT_DISCOUNT:.2f} each)\n"
    
    invoice_details += f"\nTotal Cost: ${total_cost_incl_gst:.2f}, incl ${gst} GST\n"
    invoice_details += f"-------------------"

    invoice_screen()
    
def invoice_screen():
    # destroying all the previous widgets on the screen
    for widget in root.winfo_children():
        if isinstance(widget, Frame):
            widget.destroy()

    # creating an invoice frame
    invoice_frame = Frame(root, bg = "light blue")
    invoice_frame.pack(fill=BOTH, expand=True)

    label7 = Label(invoice_frame, image=bg)
    label7.place(x=0, y=0)

     # making an invoice of all the users flight information and displaying it on screen
    Label(invoice_frame, text=invoice_details, font=("Bahnschrift Condensed", 25), bg="white").grid(row=1, column=0, padx=10, pady=10)
    
    messagebox.showinfo("Thank you!", "Your flight has been booked.")

     #storing the users order details in an external txt file
    with open ("flight_log.txt", "a+") as output:
        #include the item, price of the item, and quantity of the item the user requires. 
        output.write("".join(f"\n{invoice_details}" + "\n"))

    save = Button(invoice_frame, text="SAVE INVOICE", height=3, width=30, font=("Bahnschrift Condensed", 15), bg="light green", command=save_doc)
    save.grid(row=2, column=0, pady=10, padx=10)

    next = Button(invoice_frame, text="NEXT", height=3, width=30, font=("Bahnschrift Condensed", 15), bg="light green", command=lambda: return_to_menu(invoice_frame))
    next.grid(row=3, column=0, pady=10, padx=10)

 # making an option to allow users to save their invoice as a document
def save_doc(): 
    doc = Document()
    doc.add_heading("invoice", 0)
    doc.add_paragraph(f"{invoice_details}")
    # saving the document, by letting the user choose what to call their document
    filepath = filedialog.asksaveasfilename(defaultextension=".docx", filetypes=[("Word Documents", "*.docx"), ("All Files", "*.*")])
    doc.save(filepath)
    messagebox.showinfo("Success", "Your invoice has been saved as a word doc.  ")

def return_to_menu(current_frame):
    current_frame.pack_forget()
    main_menu()

welcome_screen()
root.mainloop()
